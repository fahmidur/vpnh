#!/usr/bin/env ruby

require 'fileutils'
require_relative 'Util'

$THE_DIR = '/var/opt/vpnh'
$TCO_DIR = File.join($THE_DIR, 'co')
$VPNH_PATH = File.join($TCO_DIR, 'vpnh')
$VPNH_SERVICE_PATH = File.join($TCO_DIR, 'vpnh.service')

def shellrc_path_add(shellrc_path, path_item)
  unless File.exists?(shellrc_path)
    puts "shellrc_path_add. no such file at #{shellrc_path}"
    return false
  end
  new_line = "export PATH=$PATH:#{path_item} #VPNH_INSTALL"
  already_installed = false
  File.open(shellrc_path) do |f|
    f.each_line do |line|
      line = line.strip
      if line == new_line
        puts "shellrc_path_add. already installed. --SKIPPED"
        already_installed = true
        break
      end
    end
  end
  return true if already_installed
  puts "shellrc_path_add. appending to PATH within #{shellrc_path}..."
  File.open(shellrc_path, 'a') do |f|
    f.puts(new_line)
  end
  puts "--- done"
  return true
end

def package_install(name)
  puts "package_install. installing #{name} ..."
  system("apt-get install -y #{name}")
end

def package_ensure(name)
  if `which #{name}`.strip.size > 0
    puts "package_ensure. #{name} already installed"
    return true
  end
  package_install(name)
end

#--- MAIN

package_ensure('curl')
package_ensure('openvpn')

puts "$THE_DIR = #{$THE_DIR}"
puts "$TCO_DIR = #{$TCO_DIR}"

if File.exists?($VPNH_PATH)
  puts "found existing vpnh at #{$VPNH_PATH}"
  puts "stopping vpnh manually..."
  system("#{$VPNH_PATH} stop")
  puts "--done"
end

Util.dir_ensure($THE_DIR)
Util.dir_remake($TCO_DIR)

puts "copying new checkout dir: #{$TCO_DIR}"
FileUtils.cp_r(File.join(__dir__, '.'), $TCO_DIR)
puts "--done"

if Util.which("systemctl")
  puts "installing vpnh systemd service..."
  system("systemctl --force disable vpnh")
  system("systemctl --force enable #{$VPNH_SERVICE_PATH}")
  system("systemctl daemon-reload")
  puts "starting vpnh daemon..."
  system("systemctl start vpnh")
  puts "--done"
end

shellrc_path_add(File.join(ENV['HOME'], '.bashrc'), $TCO_DIR)
shellrc_path_add(File.join(ENV['HOME'], '.zshrc' ), $TCO_DIR)

puts "--done. installation complete."
