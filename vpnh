#!/usr/bin/env ruby

require 'fileutils'
require 'logger'
require 'drb'

#--- Globals
$logger = Logger.new(STDOUT)
$the_path = File.join('/', 'var', 'opt', 'vpnh');
$pid_path = File.join($the_path, 'lock.pid');
$ipc_path = File.join($the_path, 'ipc.sock');

#--- Helpers
def die_with_usage(msg=nil, ecode=1)
  puts "Usage: vpn-helper [command]"
  puts "\n#{msg}" if msg
  exit ecode
end

def ami_root?
  Process.euid == 0
end

def process_exists?(pid)
  !!Process.kill(0, pid) rescue false
end

def make_paths
end

def running_server_pid
  return nil unless File.exists?($pid_path)
  existing_pid = IO.read($pid_path).strip.to_i
  if existing_pid && process_exists?(existing_pid)
    return existing_pid
  end
  return nil
end

def daemonize
  raise 'fork failed' if (pid=fork) == -1
  exit if pid != nil # exit the parent process
  Process.setsid # child becomes new session and group leader
  raise 'second fork failed' if (pid=fork) == -1
  exit if pid != nil
  daemon_pid = pid
  Dir.chdir '/'
  File.umask 0000
  STDIN.reopen '/dev/null'
  STDOUT.reopen '/dev/null'
  STDERR.reopen '/dev/null'
  yield
end


class VpnhServer
  def initialize
    @mainloop_go = true
  end

  def ignition
    if (existing_pid=running_server_pid)
      raise "Another VpnhServer is already running at PID=#{existing_pid}"
    end
    IO.write($pid_path, "#{Process.pid}\n")
    trap("TERM") do
      puts "\n--- Heard SIGTERM ---"
      shutdown
    end
    trap("INT") do
      puts "\n--- Heard SIGINT ---"
      shutdown
    end
    mainloop
  end

  def shutdown
    @mainloop_go = false
    pid = File.exists?($pid_path) ? IO.read($pid_path).strip.to_i : nil
    return unless pid
    return Process.kill(15, pid) unless pid == Process.pid
    FileUtils.rm_f($pid_path)
    DRb.stop_service
  end

  private
  
  def mainloop
    FileUtils.rm_f($ipc_path) if File.exists?($ipc_path)
    DRb.start_service("drbunix://#{$ipc_path}", self)
    @t1 = Thread.new do 
      while(@mainloop_go)
        $logger.info "."
        sleep 2
      end
    end
    begin
    DRb.thread.join
    rescue
    ensure
      DRb.stop_service
    end
    shutdown
  end
end

class VpnhClient
  def initialize
    @server = nil
  end

  def method_missing(meth, *args, &block)
    connect
    if @server && @server.respond_to?(meth)
      @server.public_send(meth, *args, &block)
    end
  end

  private

  def connect
    return if @server
    return if @connection_attempted
    if running_server_pid && File.exists?($ipc_path)
      @server = DRbObject.new_with_uri("drbunix://#{$ipc_path}")
    end
    @connection_attempted = true
  end
end

#--- MAIN
unless ami_root?
  die_with_usage("only root can run vpnh")
end
FileUtils.mkdir_p($the_path)

command = ARGV.join(" ").chomp
unless command && command.size > 0 
  die_with_usage
end

if command == 'help' || command == 'h'
  die_with_usage(nil, 0)
end

vpnd = VpnhServer.new
vpnc = VpnhClient.new

if command == 'server'
  vpnd.ignition
elsif command == 'server daemon'
  daemonize do
    vpnd.ignition
  end
elsif command == 'server shutdown' || command == 'server stop' || command == 'stop'
  vpnc.shutdown
  #vpnd.shutdown
elsif command == 'status'
  puts "TODO"
else
  die_with_usage
end

