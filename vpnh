#!/usr/bin/env ruby

require 'fileutils'
require 'logger'
require 'json'

require_relative 'Util'
require_relative 'VpnhMaster.rb'

#--- BEG. Globals
$logger = Logger.new(STDOUT)
#--- END. Globals

#--- BEG. Helpers
def die_with_usage(msg=nil, ecode=1)
  puts "Usage: vpnh [command]"
  puts "\n#{msg}" if msg
  exit ecode
end
#--- END. Helper

#--- MAIN
die_with_usage("only root can run vpnh") unless Util.ami_root?

command = ARGV.join(" ").chomp
unless command && command.size > 0 
  die_with_usage
end

if command == 'help' || command == 'h'
  die_with_usage(nil, 0)
end

master = VpnhMaster.new

def config_show(master)
  puts JSON.pretty_generate(master.config.to_h)
  unless master.config.is_valid?
    puts "--- errors: "
    master.config.errors.each do |err|
      puts "* #{err}"
    end
  end
end

if command == 'server'
  master.server.ignition
elsif command =~ /connect ([a-zA-Z0-9\.\-_]+)/
  name = $1
  puts "name=#{name}"
  master.connect(name)
elsif command == 'disconnect'
  master.disconnect()
elsif command == 'server daemon'
  master.server_daemon_ensure
elsif command == 'server shutdown' || command == 'server stop' || command == 'stop'
  puts 'stopping vpnh server...'
  master.client.shutdown
  puts 'stopping vpnh server... DONE'
elsif command == 'status'
  puts JSON.pretty_generate(master.client.status)
elsif command == 'running_server_pid'
  puts master.running_server_pid
elsif command =~ /^ovpn_(up|down)(.*)$/
  up_or_down = $1
  unless ['up', 'down'].member?(up_or_down)
    puts "ERROR. expecting up or down"
    return 1
  end
  args = $2.strip.split(/\s+/)
  puts "args=#{args}"
  unless args.size === 6
    die_with_usage('expecting 6 arguments from openvpn')
  end
  vpni_name = args[0]
  vpni_addr = args[3]
  vpni_mask = args[4]
  puts "vpni_name=#{vpni_name}"
  puts "vpni_addr=#{vpni_addr}"
  puts "vpni_mask=#{vpni_mask}"
  meth = "ovpn_#{up_or_down}".to_sym
  ret = master.public_send(meth, vpni_name, vpni_addr)
  exit (ret ? 0 : 1)
elsif command == 'get_default_iface'
  puts Util.get_default_iface
elsif command == 'get_routing_tables'
  puts JSON.pretty_generate(Util.get_routing_tables)
elsif command =~ /routing_table_add ([a-zA-Z0-9_]+)/
  puts Util.routing_table_add($1)
  puts "---"
  puts JSON.pretty_generate(Util.get_routing_tables)
elsif command =~ /routing_table_del ([a-zA-Z0-9_]+)/
  puts Util.routing_table_del($1)
  puts "---"
  puts JSON.pretty_generate(Util.get_routing_tables)
elsif command == 'get_all_ifaces'
  puts Util.get_all_ifaces.to_a.to_json
elsif command == 'get_all_users'
  puts Util.get_all_users.to_a.to_json
elsif command =~ /^user_exists\? (.+)/
  puts Util.user_exists?($1)
elsif command == 'config show' || command == 'config get'
  config_show(master)
elsif command =~ /^config get (.+)/
  key = $1.strip
  puts master.config.get(key)
elsif command =~ /^config set ([a-zA-Z0-9\-\._]+) (.+)/
  key = $1
  val = $2
  if val == 'nil' || val == 'null'
    val = nil
  end
  puts master.config.set(key, val)
  puts "---"
  config_show(master)
elsif command == 'auths flush'
  master.auths.flush
  puts "OK. all auths removed"
elsif command =~ /^ovpns add name=([a-zA-Z0-9\.\-_]+) auth=([a-zA-Z0-9\.\-_]+) (\S+)$/
  name = $1
  auth = $2
  path = $3
  puts "name=#{name}"
  puts "auth=#{auth}"
  puts "path=#{path}"
  name = master.ovpns.add(
    path, 
    name: name,
    auth: auth,
  )
  if name
    puts "name=#{name}"
  else
    puts "ovpns add FAILED"
  end
elsif command =~ /^ovpns add ([a-zA-Z0-9\.\-_]+) (\S+)$/
  name = $1
  path = $2
  puts "name=#{name}"
  puts "path=#{path}"
  name = master.ovpns.add(
    path, 
    name: name,
  )
  if name
    puts "name=#{name}"
  else
    puts "ovpns add FAILED"
  end
elsif command =~ /^ovpns add (\S+)$/
  path = $1
  puts "path=#{path}"
  name = master.ovpns.add(path)
  if name
    puts "name=#{name}"
  else
    puts "ovpns add FAILED"
  end
elsif command == 'ovpns flush'
  ok = master.ovpns.flush
  puts "ok=#{ok}"
elsif command =~ /^ovpns del (.+)$/
  ok = master.ovpns.del($1)
  puts "ok=#{ok}"
elsif command == 'ovpns all' || command == 'ovpns show'
  out = master.ovpns.all
  if out
    puts JSON.pretty_generate(out)
  else
    puts "failed to get ovpns"
  end
elsif command =~ /^auths add ([a-zA-Z0-9\.\-_]+) ([^\s]+) (.+)$/
  name = $1
  user = $2
  pass = $3
  puts "name=#{name}"
  puts "user=#{user}"
  puts "pass=#{pass}"
  master.auths.add(user, pass, name)
elsif command =~ /^auths add ([^\s]+) (.+)$/
  user = $1
  pass = $2
  puts "user=#{user}"
  puts "pass=#{pass}"
  name = master.auths.add(user, pass)
  puts "name=#{name}"
elsif command == 'auths all' || command == 'auths show'
  out = master.auths.all()
  if out
    puts JSON.pretty_generate(out.to_h)
  else
    puts "--- you have no auths"
  end
elsif command =~ /^auths del (\w+)$/
  name = $1
  puts "deleting auth with name=#{name}"
  ok = master.auths.del(name)
  puts "ok=#{ok}"
elsif command =~ /^user_add (\w+)/
  puts Util.user_add($1)
elsif command =~ /x (\w+)/
  out = master.client.public_send($1)
  puts out if out
else
  die_with_usage
end
